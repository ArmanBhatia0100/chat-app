{"version":3,"sources":["components/MessageForm/MessageForm.js","components/Messages/MyMessage.js","components/Messages/TheirMessage.js","components/ChatFeed/ChatFeed.js","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","bind","this","SendOutlined","MyMessage","message","attachments","src","file","alt","width","height","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","attachment","marginLeft","ChatFeed","renderReadReceipts","isMyMessage","chat","people","map","person","index","last_read","messages","chats","activeChat","userName","border","title","keys","Object","key","lastMessageKey","renderMessages","App","userSecret","projectID","renderChatFeed","chatAppState","onNewMessage","Audio","play","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.04318cbb.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { SendOutlined, PictureOutlined } from \"@ant-design/icons\";\r\nimport { sendMessage, isTyping } from \"react-chat-engine\";\r\nimport \"./Messageform.css\";\r\n\r\nfunction MessageForm(props) {\r\n  const [value, setValue] = useState(\"\");\r\n  const { chatId, creds } = props;\r\n\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n    isTyping(props, chatId);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const text = value.trim();\r\n\r\n    if (text.length > 0) {\r\n      sendMessage(creds, chatId, { text });\r\n      setValue(\"\");\r\n    }\r\n  };\r\n\r\n  const handleUpload = (event) => {\r\n    sendMessage(creds, chatId, { files: event.target.files, text: \"\" });\r\n  };\r\n\r\n  return (\r\n    <div className=\"form__container\">\r\n      <form className=\"message-form\" onSubmit={handleSubmit}>\r\n        <input\r\n          className=\"message-input\"\r\n          placeholder=\"Send a message...\"\r\n          value={value}\r\n          onChange={handleChange}\r\n          onSubmit={handleSubmit}\r\n        />\r\n        <label htmlFor=\"upload-button\">\r\n          <span>\r\n            <PictureOutlined className=\"picture-icon\" />\r\n          </span>\r\n        </label>\r\n        <input\r\n          type=\"file\"\r\n          multiple={false}\r\n          id=\"upload-button\"\r\n          style={{ display: \"none\" }}\r\n          onChange={handleUpload.bind(this)}\r\n        />\r\n        <button type=\"submit\" className=\"send-button\">\r\n          <SendOutlined />\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MessageForm;\r\n","import \"./MyMessage.css\";\r\nfunction MyMessage({ message }) {\r\n  if (message.attachments && message.attachments.length > 0) {\r\n    return (\r\n      <div className=\"img__container\">\r\n        <img\r\n          src={message.attachments[0].file}\r\n          alt=\"message-img\"\r\n          className=\"message_image\"\r\n          style={{\r\n            width: \"260px\",\r\n            \r\n            height: \"180px\",\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div\r\n      className=\"message\"\r\n      style={{\r\n        float: \"right\",\r\n        marginRight: \"18px\",\r\n        color: \"white\",\r\n        backgroundColor: \"#3B2A50\",\r\n      }}\r\n    >\r\n      {message.text}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MyMessage;\r\n","function TheirMessage({ lastMessage, message }) {\r\n  const isFirstMessageByUser =\r\n    !lastMessage || lastMessage.sender.username !== message.sender.username;\r\n\r\n  return (\r\n    <div className=\"message_row\">\r\n      {isFirstMessageByUser && (\r\n        <div\r\n          className=\"message__avatar\"\r\n          style={{\r\n            backgroundImage: message.sender && `url(${message.sender.avatar})`,\r\n          }}\r\n        ></div>\r\n      )}\r\n\r\n      {message.attachments && message.attachments.length > 0 ? (\r\n        <img\r\n          src={message.attachment[0].file}\r\n          alt=\"message-img\"\r\n          className=\"message_image\"\r\n          style={{ float: \"right\" }}\r\n        />\r\n      ) : (\r\n        <div\r\n          className=\"message\"\r\n          style={{\r\n            float: \"left\",\r\n            marginLeft: isFirstMessageByUser ? \"4px\" : \"48px\",\r\n            color: \"white\",\r\n            backgroundColor: \"#CABCDC\",\r\n          }}\r\n        >\r\n          {message.text}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TheirMessage;\r\n","import React from \"react\";\r\nimport MessageForm from \"../MessageForm/MessageForm\";\r\nimport MyMessage from \"../Messages/MyMessage\";\r\nimport TheirMessage from \"../Messages/TheirMessage\";\r\nimport \"./ChatFeed.css\";\r\nfunction ChatFeed(props) {\r\n  const renderReadReceipts = (message, isMyMessage) => {\r\n    chat.people.map(\r\n      (person, index) =>\r\n        person.last_read === messages.id && (\r\n          <div\r\n            key={`read${index}`}\r\n            className=\"read-reciept\"\r\n            style={{\r\n              float: isMyMessage ? \"right\" : \"left\",\r\n              backgroundImage:\r\n                person.person.avatar && `url(${person.person.avatar})`,\r\n            }}\r\n          ></div>\r\n        )\r\n    );\r\n  };\r\n\r\n  const { chats, activeChat, userName, messages } = props;\r\n\r\n  const chat = chats && chats[activeChat];\r\n  const renderMessages = () => {\r\n    const keys = Object.keys(messages);\r\n\r\n    return keys.map((key, index) => {\r\n      const message = messages[key];\r\n      const lastMessageKey = index === 0 ? null : keys[index - 1];\r\n      const isMyMessage = userName === message.sender.username;\r\n\r\n      return (\r\n        <div key={`mesg_${index}`} style={{ width: \"100%\" }}>\r\n          <div className=\"message__block\">\r\n            {isMyMessage ? (\r\n              <MyMessage message={message}></MyMessage>\r\n            ) : (\r\n              <TheirMessage\r\n                message={message}\r\n                lastMessage={messages[lastMessageKey]}\r\n              ></TheirMessage>\r\n            )}\r\n          </div>\r\n          <div\r\n            className=\"read__receipts\"\r\n            style={{\r\n              marginRight: isMyMessage ? \"18px\" : \"0px\",\r\n              marginLeft: isMyMessage ? \"0px\" : \"68px\",\r\n            }}\r\n          >\r\n            {renderReadReceipts(message, isMyMessage)}\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat__feed\" style={{ border: \"1px solid blue\" }}>\r\n      <div className=\"chat-title-container\">\r\n        <div className=\"chat-title\">{chat?.title}</div>\r\n        <div className=\"subTitle\">This is a demo project by Arman</div>\r\n        <div style={{ height: \"100px\" }}></div>\r\n      </div>\r\n      <div className=\"Chat__container\">\r\n        <div className=\"message__conatiner\">{renderMessages()}</div>\r\n        <div className=\"message_form_container\">\r\n          <MessageForm {...props} chatId={activeChat}></MessageForm>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatFeed;\r\n","import { ChatEngine } from \"react-chat-engine\";\nimport ChatFeed from \"./components/ChatFeed/ChatFeed\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ChatEngine\n        userName=\"arman001\"\n        userSecret=\"qwert\"\n        projectID=\"e5356c73-df2c-4768-92da-2c9ee1a09045\"\n        renderChatFeed={(chatAppState) => {\n          return <ChatFeed {...chatAppState}></ChatFeed>;\n        }}\n        onNewMessage={() =>\n          new Audio(\n            \"https://chat-engine-assets.s3.amazonaws.com/click.mp3\"\n          ).play()\n        }\n      ></ChatEngine>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}